// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_bili/model/barrage_entity.dart';
import 'package:flutter_bili/model/favorite_entity.dart';
import 'package:flutter_bili/model/home_entity.dart';
import 'package:flutter_bili/model/notice_entity.dart';
import 'package:flutter_bili/model/profile_entity.dart';
import 'package:flutter_bili/model/ranking_entity.dart';
import 'package:flutter_bili/model/test_entity.dart';
import 'package:flutter_bili/model/video_detail_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {
  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //Go back to a single instance by type
  static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
    final String type = M.toString();
    if (type == (BarrageEntity).toString()) {
      return BarrageEntity.fromJson(json) as M;
    }
    if (type == (FavoriteEntity).toString()) {
      return FavoriteEntity.fromJson(json) as M;
    }
    if (type == (HomeEntity).toString()) {
      return HomeEntity.fromJson(json) as M;
    }
    if (type == (HomeBanner).toString()) {
      return HomeBanner.fromJson(json) as M;
    }
    if (type == (HomeCategory).toString()) {
      return HomeCategory.fromJson(json) as M;
    }
    if (type == (HomeVideo).toString()) {
      return HomeVideo.fromJson(json) as M;
    }
    if (type == (HomeVideoListOwner).toString()) {
      return HomeVideoListOwner.fromJson(json) as M;
    }
    if (type == (NoticeEntity).toString()) {
      return NoticeEntity.fromJson(json) as M;
    }
    if (type == (ProfileEntity).toString()) {
      return ProfileEntity.fromJson(json) as M;
    }
    if (type == (ProfileCourse).toString()) {
      return ProfileCourse.fromJson(json) as M;
    }
    if (type == (ProfileBenefit).toString()) {
      return ProfileBenefit.fromJson(json) as M;
    }
    if (type == (RankingEntity).toString()) {
      return RankingEntity.fromJson(json) as M;
    }
    if (type == (TestEntity).toString()) {
      return TestEntity.fromJson(json) as M;
    }
    if (type == (TestData).toString()) {
      return TestData.fromJson(json) as M;
    }
    if (type == (VideoDetailEntity).toString()) {
      return VideoDetailEntity.fromJson(json) as M;
    }

    print("$type not found");

    return null;
  }

  //list is returned by type
  static M? _getListChildType<M>(List<dynamic> data) {
    if (<BarrageEntity>[] is M) {
      return data.map<BarrageEntity>((e) => BarrageEntity.fromJson(e)).toList()
          as M;
    }
    if (<FavoriteEntity>[] is M) {
      return data
          .map<FavoriteEntity>((e) => FavoriteEntity.fromJson(e))
          .toList() as M;
    }
    if (<HomeEntity>[] is M) {
      return data.map<HomeEntity>((e) => HomeEntity.fromJson(e)).toList() as M;
    }
    if (<HomeBanner>[] is M) {
      return data.map<HomeBanner>((e) => HomeBanner.fromJson(e)).toList() as M;
    }
    if (<HomeCategory>[] is M) {
      return data.map<HomeCategory>((e) => HomeCategory.fromJson(e)).toList()
          as M;
    }
    if (<HomeVideo>[] is M) {
      return data.map<HomeVideo>((e) => HomeVideo.fromJson(e)).toList() as M;
    }
    if (<HomeVideoListOwner>[] is M) {
      return data
          .map<HomeVideoListOwner>((e) => HomeVideoListOwner.fromJson(e))
          .toList() as M;
    }
    if (<NoticeEntity>[] is M) {
      return data.map<NoticeEntity>((e) => NoticeEntity.fromJson(e)).toList()
          as M;
    }
    if (<ProfileEntity>[] is M) {
      return data.map<ProfileEntity>((e) => ProfileEntity.fromJson(e)).toList()
          as M;
    }
    if (<ProfileCourse>[] is M) {
      return data.map<ProfileCourse>((e) => ProfileCourse.fromJson(e)).toList()
          as M;
    }
    if (<ProfileBenefit>[] is M) {
      return data
          .map<ProfileBenefit>((e) => ProfileBenefit.fromJson(e))
          .toList() as M;
    }
    if (<RankingEntity>[] is M) {
      return data.map<RankingEntity>((e) => RankingEntity.fromJson(e)).toList()
          as M;
    }
    if (<TestEntity>[] is M) {
      return data.map<TestEntity>((e) => TestEntity.fromJson(e)).toList() as M;
    }
    if (<TestData>[] is M) {
      return data.map<TestData>((e) => TestData.fromJson(e)).toList() as M;
    }
    if (<VideoDetailEntity>[] is M) {
      return data
          .map<VideoDetailEntity>((e) => VideoDetailEntity.fromJson(e))
          .toList() as M;
    }

    print("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json == null) {
      return null;
    }
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json as Map<String, dynamic>);
    }
  }
}
